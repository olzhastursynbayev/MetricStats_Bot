import os
import logging
import requests
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ======
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# ====== –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∞, –ø–æ—Ç–æ–º –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î) ======
user_tokens = {}

# ====== –¢–æ–∫–µ–Ω Telegram ======
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# ====== URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Facebook ======
REDIRECT_URI = "https://—Ç–≤–æ—è-—Å—Å—ã–ª–∫–∞-–Ω–∞-render.onrender.com/oauth/callback"
FB_APP_ID = os.getenv("FB_APP_ID")
FB_APP_SECRET = os.getenv("FB_APP_SECRET")


# ====== –ö–æ–º–∞–Ω–¥–∞ /start ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ä–µ–∫–ª–∞–º–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞–º Facebook.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–∫–ª—é—á–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /connect"
    )


# ====== –ö–æ–º–∞–Ω–¥–∞ /connect ======
async def connect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fb_auth_url = (
        f"https://www.facebook.com/v19.0/dialog/oauth?"
        f"client_id={FB_APP_ID}&redirect_uri={REDIRECT_URI}&scope=ads_read"
    )
    await update.message.reply_text(
        f"üîó –ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ:\n{fb_auth_url}"
    )


# ====== –ö–æ–º–∞–Ω–¥–∞ /report ======
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    token = user_tokens.get(uid)
    if not token:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏ Facebook —á–µ—Ä–µ–∑ /connect")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    resp = requests.get(
        "https://graph.facebook.com/v19.0/me/adaccounts?fields=name,account_id",
        params={"access_token": token}
    )
    data = resp.json().get("data", [])

    if not data:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton(acc["name"], callback_data=acc["account_id"])]
        for acc in data
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("üìä –í—ã–±–µ—Ä–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:", reply_markup=reply_markup)


# ====== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ ======
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    account_id = query.data
    uid = query.from_user.id
    token = user_tokens.get(uid)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
    resp = requests.get(
        f"https://graph.facebook.com/v19.0/act_{account_id}/insights",
        params={
            "access_token": token,
            "fields": "campaign_name,impressions,clicks,spend",
            "date_preset": "last_7d"
        }
    )
    data = resp.json().get("data", [])

    if not data:
        await query.edit_message_text(
            f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π."
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç
    text = f"üìà –û—Ç—á–µ—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É *{account_id}* –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n"
    for item in data:
        text += (
            f"üì¢ –ö–∞–º–ø–∞–Ω–∏—è: {item.get('campaign_name', '‚Äî')}\n"
            f"üëÄ –ü–æ–∫–∞–∑—ã: {item.get('impressions', '0')}\n"
            f"üñ±Ô∏è –ö–ª–∏–∫–∏: {item.get('clicks', '0')}\n"
            f"üí∞ –†–∞—Å—Ö–æ–¥: {item.get('spend', '0')} $\n\n"
        )

    await query.edit_message_text(text, parse_mode="Markdown")


# ====== –§–µ–π–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ (–Ω–∞ –ø—Ä–æ–¥–µ ‚Äî —Ä–µ–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è) ======
# üëâ –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π OAuth, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
from flask import Flask, request

app = Flask(__name__)

@app.route("/oauth/callback")
def fb_callback():
    code = request.args.get("code")
    if not code:
        return "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", 400

    # –û–±–º–µ–Ω–∏–≤–∞–µ–º code –Ω–∞ access_token
    token_resp = requests.get(
        "https://graph.facebook.com/v19.0/oauth/access_token",
        params={
            "client_id": FB_APP_ID,
            "redirect_uri": REDIRECT_URI,
            "client_secret": FB_APP_SECRET,
            "code": code
        }
    ).json()

    access_token = token_resp.get("access_token")
    if not access_token:
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞", 400

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Facebook
    user_info = requests.get(
        "https://graph.facebook.com/me",
        params={"access_token": access_token}
    ).json()
    fb_user_id = user_info.get("id")

    # ‚ö†Ô∏è –î–ª—è —Ç–µ—Å—Ç–∞: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ù–∞ –ø—Ä–æ–¥–µ –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å fb_user_id —Å Telegram user_id
    user_tokens[fb_user_id] = access_token

    return "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–µ—Ä–Ω–∏—Å—å –≤ Telegram –∏ –≤–≤–µ–¥–∏ /report"


# ====== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ======
def run_bot():
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("connect", connect))
    application.add_handler(CommandHandler("report", report))
    application.add_handler(CallbackQueryHandler(button_handler))

    application.run_polling()


if __name__ == "__main__":
    from threading import Thread
    # Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=lambda: app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))).start()
    # Telegram –±–æ—Ç
    run_bot()
